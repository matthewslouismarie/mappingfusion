<?php

namespace MF\Model;

use Closure;
use MF\Enum\ModelPropertyType;

class ModelProperty
{
    private string $name;

    private mixed $type;

    private $autoGenerated;

    private $required;

    private bool $persisted;

    private ?Closure $generator;

    private array $constraints;

    private array $alternateLocations;

    public function __construct(
        string $name,
        mixed $type,
        bool $autoGenerated = false,
        bool $persisted = true,
        bool $required = true,
        ?Closure $generator = null,
        array $constraints = [],
        array $alternateLocations = [],
    ) {
        $this->name = $name;
        $this->type = $type;
        $this->autoGenerated = $autoGenerated;
        $this->persisted = $persisted;
        $this->required = $required;
        $this->generator = $generator;
        $this->constraints = $constraints;
        $this->alternateLocations = $alternateLocations;
    }

    /**
     * Called when transformed into an app array, after the app array was populated with temporary values.
     * This can be used to automatically generate a value from the other property values.
     */
    public function transform(array $appArray): mixed {
        if (null === $this->generator) {
            return $appArray[$this->name];
        }
        return $this->generator->call($this, $appArray);
    }

    public function getAlternateName(ModelDefinition $def): ?string {
        return $this->alternateLocations[get_class($def)] ?? null;
    }

    public function getName(): string {
        return $this->name;
    }

    public function getType(): mixed {
        return $this->type;
    }

    public function getConstraints(): array {
        return $this->constraints;
    }

    public function isAutoGenerated(): bool {
        return $this->autoGenerated;
    }

    public function isPersisted(): bool {
        return $this->persisted;
    }

    public function isRequired(): bool {
        return $this->required;
    }
}